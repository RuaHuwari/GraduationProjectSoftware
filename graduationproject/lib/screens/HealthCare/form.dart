import 'dart:convert';
import 'dart:typed_data';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:graduationproject/Constans/API.dart';
import 'package:graduationproject/Constans/colors.dart';
import 'package:graduationproject/resources/save_data.dart';
import 'package:graduationproject/screens/profile/Components/pickimage.dart';
import 'package:graduationproject/screens/HealthCare/HealthCare.dart';
import 'package:graduationproject/screens/HomeScreen.dart';
import 'package:graduationproject/screens/payement.dart';
import 'package:http/http.dart' as http;
import 'package:image_picker/image_picker.dart';
class SpecialNeedsForm extends StatefulWidget {
  SpecialNeedsForm({ required this.userId, required this.firstname, required this.lastname, required this.id});
  final String userId;
  final String firstname;
  final String lastname;
  final int id;
  @override
  _SpecialNeedsFormState createState() => _SpecialNeedsFormState();
}

class _SpecialNeedsFormState extends State<SpecialNeedsForm> {
  List<dynamic> centersData = [];
  StoreData storeData=new StoreData();
  final FirebaseStorage _storage = FirebaseStorage.instance;
  final FirebaseFirestore _firestore=FirebaseFirestore.instance;
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  TextEditingController firstNameController = TextEditingController();
  TextEditingController secondNameController = TextEditingController();
  TextEditingController lastNameController = TextEditingController();
  TextEditingController idController = TextEditingController();
  DateTime? _selectedDate;
  int application_ID=0;
  TextEditingController statusController = TextEditingController();
  int applicationID=0;
  Uint8List? _image;
  Future<int> fetchData()  async {
    try {
      String uri = "http://$IP/palease_api/allapplication.php";
      var response = await http.post(
        Uri.parse(uri),
        body: {
        },
      );
      if (response.statusCode == 200) {
        var jsonData = jsonDecode(response.body);
        if (jsonData['success']) {
          return applicationID = jsonData['max_id'];
        } else {

          return(jsonData['error']);
        }
      } else {
        return(0);
      }
    } catch (e) {
      return(0);
    }
  }
  Future<int> fetchapplicationID()  async {
    try {
      String uri = "http://$IP/palease_api/getapplicationid.php";
      var response = await http.post(
        Uri.parse(uri),
        body: {
          'department_id': widget.id.toString()
        },
      );
      if (response.statusCode == 200) {
        var jsonData = jsonDecode(response.body);
        if (jsonData['success']) {
          return application_ID = jsonData['id'];
        } else {

          return(jsonData['error']);
        }
      } else {
        return(0);
      }
    } catch (e) {
      return(0);
    }
  }
  Future<void> _getImage() async {
    Uint8List img = await pickImage(ImageSource.gallery);
    setState(() {
      _image = img;
    });
  }
  Future<void> _saveData(
      String ID,
      String dob,
      String name,
      String status,
      int applicationid
      ) async {
    if (name == "" ) {
      print("please fill in all field");
    } else {
      try {
        // Format the dob parameter as a string
        String formattedDOB = dob; // Or any other desired format
        print (applicationid.toString());
        print(widget.userId);
        String departmentid = widget.id.toString();
        // Send POST request to the server
        String uri="http://$IP/palease_api/insert_application.php";
        var response=await http.post(Uri.parse(uri),body: {
          "id":ID,
          "applicationid": applicationid.toString(),
          "departmentid": departmentid,
          "user_id": widget.userId,
          "applicantID":idController.text,
          "dob": formattedDOB,
          "name": name,
          "status": "Not Done",
          "created_at": DateTime.now().toString(),
          "updated_at": DateTime.now().toString()
        },
        );

        // Check if the request was successful (status code 200)
        if (response.statusCode == 200) {
          // Extract the response body
          var responseBody = jsonDecode(response.body);

          // Extract the autogenerated ID from the response

          // Show success message to the user
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Application submitted successfully!'),
            ),
          );
        } else {
          // Show error message to the user
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Failed to submit application. Please try again.'),
            ),
          );
        }
      } catch (e) {
        // Handle any exceptions or errors
        print('Error: $e');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error occurred while submitting application.'),
          ),
        );
      }
    }
  }
  void showMessageDialog(BuildContext context,String text,String text2) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(text,style: TextStyle(color:primary,fontWeight: FontWeight.bold),),
          content: Text(text2),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                // Close the dialog
                Navigator.of(context).pop();
                Navigator.push(
                  context,
                  MaterialPageRoute(
                      builder: (context) => homescreen(
                          userId: widget.userId,
                          firstname: widget.firstname,
                          lastname: widget.lastname)),
                );
              },
              child: Text('OK'),
            ),
          ],
        );
      },
    );
  }
  Future<String> _saveApplicationIdToFirestore(String applicationId,int applicationid) async {
    String resp = "error occurred";
    try {
      print('1');
      String _imageurl=await storeData.UploadImageToStorage(applicationId+'lastcheckup',_image!) ;
      print('2');
      // Check if there are existing images with the same ID
      final QuerySnapshot querySnapshot = await _firestore
          .collection("IDApplication")
          .where('id', isEqualTo: applicationId)
          .where('user_id', isEqualTo: widget.userId)
          .where('department_id', isEqualTo: widget.id.toString())
          .where('ApplicantID', isEqualTo: idController.text)
          .where('applicationID', isEqualTo: applicationid.toString())
          .get();

      // If there are existing images, delete them
      for (DocumentSnapshot doc in querySnapshot.docs) {
        await doc.reference.delete();
      }
      print(applicationid.toString());
      await _firestore.collection("IDApplications").add({
        'id': applicationId,
        'applicationID': applicationid.toString(),
        'departmentID':widget.id.toString(),
        'user_id':widget.userId,
        'FirstName':firstNameController.text,
        'SecondName': secondNameController.text,
        'LastName': lastNameController.text,
        'ApplicantID':idController.text,
        'DateOfBirth':_selectedDate.toString(),
        'LastCheckUp':_imageurl,
      });

      resp = 'success';
    } catch (e) {
      resp = e.toString();
      print(e.toString());
    }
    print(resp);
    return resp;
    return '';
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
    );
    if (pickedDate != null && pickedDate != _selectedDate) {
      setState(() {
        _selectedDate = pickedDate;
      });
    }
  }
  void _submitForm() {
    if (_formKey.currentState!.validate()) {

    }
  }

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        leading:
        IconButton(
          icon: Icon(Icons.arrow_back_ios, color: Colors.white, size: 35,),
          onPressed: () {
            Navigator.push(context, MaterialPageRoute(builder: (context) =>
                HealthCare(userId: widget.userId,
                    firstname: widget.firstname,
                    lastname: widget.lastname)));
          },
        ),
        title: Text('Special Needs Centers Form,', style: TextStyle(
            color: Colors.white,
            fontSize: 35,
            fontWeight: FontWeight.bold,
            fontFamily: 'NotoSerif'
        ),),
        backgroundColor: Colors.transparent,
        // Make the app bar transparent
        flexibleSpace: Container(
          decoration: BoxDecoration(
           color: Colors.purple
          ),
        ),

      ),
      body: Stack(
        children: [
          Container(
            height: MediaQuery
                .of(context)
                .size
                .height,
            width: MediaQuery
                .of(context)
                .size
                .width,
            decoration: const BoxDecoration(
             color: Colors.purple
            ),

          ),
          Padding(
            padding: const EdgeInsets.only(left:10.0,right:10),
            child: Container(
              decoration:BoxDecoration(
                borderRadius: BorderRadius.circular(30),
                color: Colors.white
              ),
              child: Form(
                  key: _formKey,
                  child: ListView(
                  padding: EdgeInsets.all(16.0),
                  children: [
                  TextFormField(
                  controller: firstNameController,
                  decoration: InputDecoration(labelText: 'First Name'),
                  validator: (value) {
                  if (value == null || value.isEmpty) {
                  return 'Please enter first name';
                  }
                  return null;
                  },
                  ),
                  TextFormField(
                  controller: secondNameController,
                  decoration: InputDecoration(labelText: 'Second Name'),
                  validator: (value) {
                  if (value == null || value.isEmpty) {
                  return 'Please enter second name';
                  }
                  return null;
                  },
                  ),
                  TextFormField(
                  controller: lastNameController,
                  decoration: InputDecoration(labelText: 'Last Name'),
                  validator: (value) {
                  if (value == null || value.isEmpty) {
                  return 'Please enter last name';
                  }
                  return null;
                  },
                  ),
                  TextFormField(
                  controller: idController,
                  decoration: InputDecoration(labelText: 'ID'),
                  validator: (value) {
                  if (value == null || value.isEmpty) {
                  return 'Please enter ID';
                  }
                  return null;
                  },
                  ),
                    ListTile(
                      title: Text(
                        _selectedDate == null
                            ? 'Date of Birth'
                            : 'Date of Birth: ${_selectedDate!.toLocal()
                            .year} - ${_selectedDate!.toLocal().month} - ${_selectedDate!
                            .toLocal().day}',
                        style: TextStyle(color: primary),
                      ),
                      trailing: Icon(Icons.calendar_today),
                      onTap: () { _selectDate(context);
                      },
                    ),
                  TextFormField(
                  controller: statusController,
                  decoration: InputDecoration(labelText: 'Status Description'),
                  maxLines: null,
                  ),
                  SizedBox(height: 20),
                    _image != null
                        ? Image.memory(
                      _image!,
                      height: 200,
                    )
                        : Container(),
                    ElevatedButton(
                      onPressed: () {
                        _getImage();
                      },
                      child: Text('Select Image of the last check up for the patient'),
                    ),
                    SizedBox(height: 20),
                    ElevatedButton(
                      onPressed: () async {
                        applicationID = await fetchData();
                          application_ID= await fetchapplicationID();


                        print(applicationID);
                        applicationID++;
                        print(applicationID);
                        _saveData(applicationID.toString(), _selectedDate.toString(),
                            firstNameController.text, 'Not Done',application_ID);
                        _saveApplicationIdToFirestore(applicationID.toString(),application_ID);
                        Navigator.push(
                          context,
                          MaterialPageRoute(builder: (context) =>
                              pay(applicationID: applicationID.toString(),
                                  price: 24,
                                  firstname: widget.firstname,
                                  lastname: widget.lastname,
                                  userId: widget.userId)),
                        );
                      },
                      child: Text('Submit'),
                  ),
                  ],
                  ),
                  ),
            ),
    )

    ]
    )
    );
  }
}
