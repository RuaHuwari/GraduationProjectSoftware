import 'dart:convert';
import 'dart:typed_data';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:graduationproject/Constans/API.dart';
import 'package:graduationproject/Constans/colors.dart';
import 'package:graduationproject/resources/save_data.dart';
import 'package:graduationproject/screens/profile/Components/pickimage.dart';
import 'package:graduationproject/screens/Driving/newlicense.dart';
import 'package:graduationproject/screens/HomeScreen.dart';
import 'package:graduationproject/screens/payement.dart';
import 'package:graduationproject/widgets/bottomnavigation.dart';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:http/http.dart';

import 'package:image_picker/image_picker.dart';
import 'package:flutter_downloader/flutter_downloader.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter/services.dart';

class licenseform extends StatefulWidget {
   licenseform({required this.userId, required this.firstname, required this.lastname, required this.i});
final String userId;
final String firstname;
final String lastname;
final int i;
  @override
  State<licenseform> createState() => _formState();
}

class _formState extends State<licenseform> {
  //setting the expansion function for the navigation rail
  bool isExpanded = false;
  int _currentPageIndex = 0;

  // Variable to store the selected city
  String? selectedCity;

  TextEditingController _firstNameController = TextEditingController();
  TextEditingController _lastNameController = TextEditingController();
  TextEditingController _fatherNameController = TextEditingController();
  TextEditingController _grandfatherNameController = TextEditingController();
  TextEditingController _LicenseManagement = TextEditingController();
  String licensetype = '';
  TextEditingController _Oldlicense = TextEditingController();
  TextEditingController _OldlicenseNumber = TextEditingController();
  TextEditingController _IDNumberController = TextEditingController();
  TextEditingController _SexController = TextEditingController();
  TextEditingController _AddressController = TextEditingController();
  TextEditingController _PhoneNumberController = TextEditingController();
  DateTime? _selectedDate;
  Uint8List? _image1;
  Uint8List? _image2;
  Uint8List? _IDCard;
  Uint8List? _personalimage;
  Uint8List? _Certificate;
  Uint8List? _goodConduct;
  Uint8List? _fatheragreement;
  Uint8List? _schoolcertificate;
  StoreData storeData=new StoreData();
  final FirebaseStorage _storage = FirebaseStorage.instance;
  final FirebaseFirestore _firestore=FirebaseFirestore.instance;
  final PageController _pageController = PageController();
  int _age=0;
  late int applicationID;
  Future<int> fetchData()  async {
    try {
      String uri = "http://$IP/palease_api/allapplication.php";
      var response = await http.post(
        Uri.parse(uri),
        body: {
        },
      );
      if (response.statusCode == 200) {
        var jsonData = jsonDecode(response.body);
        if (jsonData['success']) {
          return applicationID = jsonData['max_id'];
        } else {

          return(jsonData['error']);
        }
      } else {
        return(0);
      }
    } catch (e) {
      return(0);
    }
  }
  void _nextPage() {
    if (_currentPageIndex < 3) { // Change 2 to the total number of stages - 1
      setState(() {
        _currentPageIndex++;
      });
      _pageController.animateToPage(
        _currentPageIndex,
        duration: const Duration(milliseconds: 500),
        curve: Curves.ease,
      );
    }
  }
  Future<void> _saveData(
      String ID,
      String dob,
      String name,
      String status,
      ) async {
    if (name == "") {
      print("please fill in all field");
    } else {
      try {
        // Format the dob parameter as a string
        String formattedDOB = dob; // Or any other desired format
        String applicationid = "9";
        String departmentid = "3";
        // Send POST request to the server
        String uri="http://$IP/palease_api/insert_application.php";
        var response=await http.post(Uri.parse(uri),body: {
          'id':ID,
          "applicationid": applicationid,
          "departmentid": departmentid,
          "user_id": widget.userId,
          "applicantID":_IDNumberController.text,
          "dob": formattedDOB,
          "name": name,
          "status": "Not Done",
          "created_at": DateTime.now().toString(),
          "updated_at": DateTime.now().toString()
        },
        );

        // Check if the request was successful (status code 200)
        if (response.statusCode == 200) {
          // Extract the response body
          var responseBody = jsonDecode(response.body);

          // Extract the autogenerated ID from the response

          // Show success message to the user
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Application submitted successfully!'),
            ),
          );
        } else {
          // Show error message to the user
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Failed to submit application. Please try again.'),
            ),
          );
        }
      } catch (e) {
        // Handle any exceptions or errors
        print('Error: $e');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error occurred while submitting application.'),
          ),
        );
      }
    }
  }
  Future<String> _saveApplicationIdToFirestore(String applicationId) async {
    String resp = "error occurred";
    try {
      print('1');

      String _imageurl=await storeData.UploadImageToStorage(applicationId+'personal image',_personalimage!) ;
      print('2');
      String _idurl=await storeData.UploadImageToStorage(applicationId+'IDCard',_IDCard!) ;
      String _firstpage=await storeData.UploadImageToStorage(applicationId+'FirstPage',_image1!) ;
      String _secondpage=await storeData.UploadImageToStorage(applicationId+'SecondPage',_image2!) ;
      String _certificate='',_schoolCertificate='',_goodconduct='',_agreement='';
      if(widget.i==1 ||widget.i== 4 || widget.i== 5 || widget.i== 6|| widget.i== 7 ||widget.i== 8)
      _certificate=await storeData.UploadImageToStorage(applicationId+'Certificate',_Certificate!) ;
      if( widget.i== 5 || widget.i== 6|| widget.i== 7 ||widget.i== 8)
       _schoolCertificate=await storeData.UploadImageToStorage(applicationId+'SchoolCertificate',_schoolcertificate!) ;
      if( widget.i== 6|| widget.i== 7 ||widget.i== 8)
      _goodconduct=await storeData.UploadImageToStorage(applicationId+'GoodConduct',_goodConduct!) ;
      if(widget.i==9 && _selectedDate!=null && _calculateage(_selectedDate!)<18)
        _agreement=await storeData.UploadImageToStorage(applicationId+'agreement',_fatheragreement!) ;
      print('3');
      // Check if there are existing images with the same ID
      final QuerySnapshot querySnapshot = await _firestore
          .collection("IDApplication")
          .where('id', isEqualTo: applicationId)
          .where('user_id', isEqualTo: widget.userId)
          .where('department_id', isEqualTo: 3)
          .where('ApplicantID', isEqualTo: _IDNumberController.text)
          .where('applicationID', isEqualTo: 9)
          .get();

      // If there are existing images, delete them
      for (DocumentSnapshot doc in querySnapshot.docs) {
        await doc.reference.delete();
      }
      await _firestore.collection("IDApplications").add({
        'id': applicationId,
        'applicationID': 9,
        'departmentID':3,
        if(widget.i==1)
          'License Type':'Tractor',
        if(widget.i==2)
          'License Type':'Private Car',
        if(widget.i==3)
          'License Type':'Commercial Driving License',
        if(widget.i==4)
          'License Type':'Heavy Vehicle Driving License',
        if(widget.i==5)
          'License Type':' Trailer Driving License',
        if(widget.i==6)
          'License Type':'Public Taxi Driving License',
        if(widget.i==7)
          'License Type':'Public Bus Driving License',
        if(widget.i==8)
          'License Type':'Fire Truck Driving License',
        if(widget.i==9)
          'License Type':'MotorBike Driving License up to 500 cc',
        if(widget.i==10)
          'License Type':'Motorcycle Driving License (C) over 500 cc',

        'user_id':widget.userId,
        'FirstName':_firstNameController.text,
        'LastName': _lastNameController.text,
        'ApplicantID': _IDNumberController.text,
        'DateOfBirth':_selectedDate.toString(),
        'Gender':_SexController.text,
        'FatherName':_fatherNameController.text,
        'GrandFatherName':_grandfatherNameController.text,
        'Address': _AddressController.text,
        'PhoneNumber':_PhoneNumberController.text,
        'personalimage':_imageurl,
        'Firstpage':_firstpage,
        'secondpage':_secondpage,
        if(_Oldlicense.text!='')
        'OLD License Type':_Oldlicense,
        if(_OldlicenseNumber.text!='')
        'OLD License Number':_OldlicenseNumber,
        'IDCard':_idurl,
        if(widget.i==1 ||widget.i== 4 || widget.i== 5 || widget.i== 6|| widget.i== 7 ||widget.i== 8)
          'Course Cetificate':_certificate,
        if( widget.i== 5 || widget.i== 6|| widget.i== 7 ||widget.i== 8)
          'School Certificate':_schoolCertificate,
        if(widget.i== 6|| widget.i== 7 ||widget.i== 8)
        'good conduct':_goodconduct,
        if(_selectedDate!=null && _calculateage(_selectedDate!)<18)
          'fatheragreement':_agreement,
      });

      resp = 'success';
    } catch (e) {
      resp = e.toString();
    }
    return resp;
    return '';
  }
  void _previousPage() {
    if (_currentPageIndex > 0) {
      setState(() {
        _currentPageIndex--;
      });
      _pageController.animateToPage(
        _currentPageIndex,
        duration: const Duration(milliseconds: 500),
        curve: Curves.ease,
      );
    }
  }
  Future<void> _getImage1() async {
    Uint8List img = await pickImage(ImageSource.gallery);
    setState(() {
      _image1 = img;
    });
  }
  Future<void> _getImage2() async {
    Uint8List img = await pickImage(ImageSource.gallery);
    setState(() {
      _image2 = img;
    });
  } Future<void> _getpersonal() async {
    Uint8List img = await pickImage(ImageSource.gallery);
    setState(() {
      _personalimage = img;
    });
  }
  Future<void> _getID() async {
    Uint8List img = await pickImage(ImageSource.gallery);
    setState(() {
      _IDCard = img;
    });
  }
  Future<void> _getGoodConduct() async {
    Uint8List img = await pickImage(ImageSource.gallery);
    setState(() {
      _goodConduct = img;
    });
  }
  Future<void> _getschoolcertificate() async {
    Uint8List img = await pickImage(ImageSource.gallery);
    setState(() {
      _schoolcertificate = img;
    });
  }
  Future<void> _getCertificate() async {
    Uint8List img = await pickImage(ImageSource.gallery);
    setState(() {
      _Certificate = img;
    });
  } Future<void> _getagreement() async {
    Uint8List img = await pickImage(ImageSource.gallery);
    setState(() {
      _fatheragreement = img;
    });
  }
  int _calculateage(DateTime dob) {
    final now = DateTime.now();
    int age = now.year - dob.year;
    if (now.month < dob.month || (now.month == dob.month && now.day < dob.day)) {
      age--;
    }
    return age ;
  }
  Future<void> _selectDate1(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
    );
    if (pickedDate != null && pickedDate != _selectedDate) {
      setState(() {
        _selectedDate = pickedDate;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        leading:
        IconButton(
          icon: Icon(Icons.arrow_back_ios, color: Colors.white, size: 35,),
          onPressed: () {
            Navigator.push(context, MaterialPageRoute(builder: (context) =>
                Newlicense(userId: widget.userId,
                    firstname: widget.firstname,
                    lastname: widget.lastname)));
          },
        ),
        title: Text('New License Form', style: TextStyle(
            color: Colors.white,
            fontSize: 35,
            fontWeight: FontWeight.bold,
            fontFamily: 'NotoSerif'
        ),),
        backgroundColor: Colors.transparent,
        // Make the app bar transparent
        flexibleSpace: Container(
          decoration: BoxDecoration(
           color: Colors.purple
          ),
        ),

      ),
      body: Stack(
        children: [
          Container(
            height: MediaQuery
                .of(context)
                .size
                .height,
            width: MediaQuery
                .of(context)
                .size
                .width,
            decoration: const BoxDecoration(
            color: Colors.purple
            ),

          ),
          Padding(
            padding: const EdgeInsets.only(top: 80.0),
            child: ListView(
              children: [
                Container(
                  decoration: const BoxDecoration(
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(40),
                      topRight: Radius.circular(40),
                    ),
                    color: Colors.white,
                  ),
                  height: MediaQuery
                      .of(context)
                      .size
                      .height,
                  width: MediaQuery
                      .of(context)
                      .size
                      .width,
                  child: Padding(
                    padding: const EdgeInsets.fromLTRB(18.0, 18.0, 18.0, 18.0),
                    child:
                    PageView(
                      controller: _pageController,
                      physics: NeverScrollableScrollPhysics(),
                      // Disable swiping
                      children: [
                        // Stage 1
                        _buildStage1(),
                        // Stage 2
                        _buildStage2(),
                        // Stage 3
                        _buildStage3(),
                        _buildStage4(),
                        //_buildStage5(),
                        //_buildStage6(),
                      ],
                    ),
                  ),
                ),

              ],
            ),
          ),
          Container(
            padding: EdgeInsets.only(top: 560),
            child: Row(
              children: [
                if (_currentPageIndex != 0)
                  IconButton(
                    padding: EdgeInsets.only(left: 260),
                    icon: Icon(Icons.arrow_back),
                    onPressed: _previousPage,
                    color: primary,

                  ),
                if (_currentPageIndex !=
                    3) // Change 2 to the total number of stages - 1
                  IconButton(
                    padding: EdgeInsets.only(left: 20),

                    color: primary,
                    //alignment: Alignment.bottomRight,
                    icon: Icon(Icons.arrow_forward),
                    onPressed: _nextPage,
                  ),
              ],
            ),
          ),
          navigator.buildNavigator(
              context, widget.userId, widget.firstname, widget.lastname),
        ],
      ),
    );
  }


  Widget _buildStage1() {
    return Container(
      padding: EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            padding: const EdgeInsets.all(15),
            height: 500,
            decoration: BoxDecoration(

                color: Colors.white.withOpacity(0.4),
                borderRadius: BorderRadius.circular(50)
            ),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'In order to get New license, you need to have these files ready:',
                  style: TextStyle(
                    fontSize: 20,
                    color: primary,
                  ),),
                Text('1. Personal image, with Blue background.',
                    style: TextStyle(
                      fontSize: 12,
                      color: primary,

                    ), textAlign: TextAlign.left),
                Text('2. Picture of your ID card', style: TextStyle(
                  fontSize: 12,
                  color: primary,
                ), textAlign: TextAlign.left),
                Text('3. any other needed files will be asked from you in the form depending on the license type you chose, for more info go back to the page with the license type instructions',
                  style: TextStyle(
                    fontSize: 12,
                    color: primary,
                  ),),
                Text('4. download the images using the buttons on this page, fill the pages, you will submit them at the end of the form.',
                  style: TextStyle(
                    fontSize: 12,
                    color: primary,
                  ),),
                Text('5. You will need to pay 120 ILS in order to apply for the form.',
                  style: TextStyle(
                    fontSize: 12,
                    color: primary,
                  ),),
                Text("    "),
                Text(
                  'After you get everything ready, You can proceed in this page and start filling the requirements.',
                  style: TextStyle(
                    fontSize: 12,
                    color: primary,
                  ),),
                Center(
                  child: ElevatedButton(
                    onPressed: () => downloadFile('firstpage',"assets/driving1.jpg"),
                    child: Text("Download first page of the form"),
                  ),
                ),
                Center(
                  child: ElevatedButton(
                    onPressed: () => downloadFile('secondpage',"assets/driving.jpg"),
                    child: Text("Download second page of the form"),
                  ),
                ),
              ],
            ),
          ),
          // Example: TextFormField(), ElevatedButton(), etc.
        ],
      ),
    );
  }
  downloadFile(String fileName, String url) async {
    try {
      final ByteData data = await rootBundle.load(url);
      final Uint8List imageData = data.buffer.asUint8List();

      Directory? downloadsDirectory;
      if (Platform.isAndroid) {
        downloadsDirectory = await getExternalStorageDirectory();
        // Use a specific directory path if needed, for example: '/storage/emulated/0/Download'
        downloadsDirectory = Directory('/storage/emulated/0/Download');
      } else if (Platform.isIOS) {
        downloadsDirectory = await getDownloadsDirectory();
      }

      if (downloadsDirectory == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Unable to get the downloads directory')),
        );
        return;
      }

      final file = File('${downloadsDirectory.path}/'+fileName+'.png');
      await file.writeAsBytes(imageData);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Image saved to ${file.path}')),
      );
    } catch (e) {
      print('Error downloading image: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error downloading image: $e')),
      );
    }
  }

Widget _buildStage2() {
    List<String> palestinianCities = [
      'Gaza',
      'Jerusalem',
      'Hebron',
      'Nablus',
      'Bethlehem',
      'Ramallah',
      'Tulkarm',
      'Jericho',
      'Selfit',
      'Jenin',
      'Qalqilia',

    ];

    return Container(
      padding: EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Dropdown list for Palestinian cities
          DropdownButtonFormField<String>(
            value: selectedCity,
            onChanged: (value) {
              // Update the selected city when the user makes a selection
              selectedCity = value;
            },
            items: palestinianCities.map((String city) {
              return DropdownMenuItem<String>(
                value: city,
                child: Text(city),
              );
            }).toList(),
            decoration: InputDecoration(labelText: 'Select City'),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please select a city';
              }
              return null;
            },
          ),
          TextFormField(
            controller: _Oldlicense,
            decoration: InputDecoration(
              labelText: 'I Have A license of type:',),
            style: TextStyle(color: primary),
          ),
          TextFormField(
            controller: _OldlicenseNumber,
            decoration: InputDecoration(
              labelText: 'I have a License with license number:',),
            style: TextStyle(color: primary),
          ),
          TextFormField(
            controller: _firstNameController,
            decoration: InputDecoration(labelText: 'First Name',),
            style: TextStyle(color: primary),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your first name';
              }
              return null;
            },
          ),
          TextFormField(
            controller: _fatherNameController,
            decoration: InputDecoration(labelText: "Father's Name",),
            style: TextStyle(color: primary),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your father\'s name';
              }
              return null;
            },
          ),
          TextFormField(
            controller: _grandfatherNameController,
            decoration: InputDecoration(labelText: "Grandfather's Name"),
            style: TextStyle(color: primary),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your grandfather\'s name';
              }
              return null;
            },
          ),
          TextFormField(
            controller: _lastNameController,
            decoration: InputDecoration(labelText: 'Last Name'),
            style: TextStyle(color: primary),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your last name';
              }
              return null;
            },
          ),
        ],
      ),
    );
  }

  Widget _buildStage3() {
    return Container(
      padding: EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          TextFormField(
            controller: _IDNumberController,
            decoration: InputDecoration(labelText: 'ID Number'),
            style: TextStyle(color: primary),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your ID number';
              }
              return null;
            },
          ),

          TextFormField(
            controller: _SexController,
            decoration: InputDecoration(labelText: "Gender (M/F)"),
            style: TextStyle(color: primary),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your Gender';
              }
              return null;
            },
          ),
          ListTile(
            title: Text(
              _selectedDate == null
                  ? 'Date of Birth'
                  : 'Date of Birth: ${_selectedDate!.toLocal()
                  .year} - ${_selectedDate!.toLocal().month} - ${_selectedDate!
                  .toLocal().day}',
              style: TextStyle(color: primary),
            ),
            trailing: Icon(Icons.calendar_today),
            onTap: () { _selectDate1(context);
              setState(() {
                _age=_calculateage(_selectedDate!);
              });
            },
          ),
          TextFormField(
            controller: _AddressController,
            decoration: InputDecoration(labelText: "Address"),
            style: TextStyle(color: primary),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your Address';
              }
              return null;
            },
          ),
          TextFormField(
            controller: _PhoneNumberController,
            decoration: InputDecoration(labelText: "PhoneNumber"),
            style: TextStyle(color: primary),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your Phone';
              }
              return null;
            },
          ),

        ],
      ),
    );
  }

  Widget _buildStage4() {
    return Container(
      padding: EdgeInsets.all(20),
      child: ListView(
        children: [
          _image1==null?
          ElevatedButton.icon(
            onPressed: _getImage1,
            icon: Icon(Icons.image),
            label: Text('Select First page of Form'),
          ):Column(
            children: [
              Text(
                'Selected File:',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              Image.memory(_image1!,height: 100,),
            ],
          ),
          _image2==null?
          ElevatedButton.icon(
            onPressed: _getImage2,
            icon: Icon(Icons.image),
            label: Text('Select Second page of Form'),
          ):Column(
            children: [
              Text(
                'Selected File:',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              Image.memory(_image2!,height: 100,),
            ],
          ),
          _IDCard==null?
          ElevatedButton.icon(
            onPressed: _getID,
            icon: Icon(Icons.image),
            label: Text('Select ID Card'),
          ):Column(
            children: [
              Text(
                'Selected File:',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              Image.memory(_IDCard!,height: 100,),
            ],
          ),
    _personalimage==null?
    ElevatedButton.icon(
    onPressed: _getpersonal,
    icon: Icon(Icons.image),
    label: Text('Select Personal Image'),
    ):Column(
    children: [
    Text(
    'Selected File:',
    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
    ),
    Image.memory(_personalimage!,height: 100,),
    ],
    ),
         if(widget.i==1)
    _Certificate==null?
    ElevatedButton.icon(
      onPressed: _getCertificate,
      icon: Icon(Icons.image),
      label: Text('Select Tractor School Certificate'),
      ):Column(
    children: [
    Text(
    'Selected File:',
      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
    ),
    Image.memory(_Certificate!,height: 100,),
    ],
    ),
          if(widget.i==4)
          _Certificate==null?
    ElevatedButton.icon(
    onPressed: _getCertificate,
    icon: Icon(Icons.image),
    label: Text('Select Certificate of heavy cargo course'),
    ):Column(
    children: [
    Text(
    'Selected File:',
    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
    ),
    Image.memory(_Certificate!,height: 100,),
    ],
    ),
          if(widget.i==5)
            _Certificate==null?
            ElevatedButton.icon(
              onPressed: _getCertificate,
              icon: Icon(Icons.image),
              label: Text('Select Certificate of heavy cargo course'),
            ):Column(
              children: [
                Text(
                  'Selected File:',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                Image.memory(_Certificate!,height: 100,),
              ],
            ),
          if(widget.i==6)
            Column(
              children: [
                _Certificate==null?
                ElevatedButton.icon(
                  onPressed: _getCertificate,
                  icon: Icon(Icons.image),
                  label: Text('Select Certificate of public taxi course'),
                ):Column(
                  children: [
                    Text(
                      'Selected File:',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    Image.memory(_Certificate!,height: 100,),
                  ],
                ),
                _schoolcertificate==null?
                ElevatedButton.icon(
                  onPressed: _getschoolcertificate,
                  icon: Icon(Icons.image),
                  label: Text('School Certificate up to the 7 preperatory grade'),
                ):Column(
                  children: [
                    Text(
                      'Selected File:',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    Image.memory(_schoolcertificate!,height: 100,),
                  ],
                ),
                _goodConduct==null?
                ElevatedButton.icon(
                  onPressed: _getCertificate,
                  icon: Icon(Icons.image),
                  label: Text('Select Certificate of Good Conduct Certificate'),
                ):Column(
                  children: [
                    Text(
                      'Selected File:',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    Image.memory(_goodConduct!,height: 100,),
                  ],
                ),
              ],
            ),
          if(widget.i==7)
            Column(
              children: [
                _Certificate==null?
                ElevatedButton.icon(
                  onPressed: _getCertificate,
                  icon: Icon(Icons.image),
                  label: Text('Select Certificate of public bus course'),
                ):Column(
                  children: [
                    Text(
                      'Selected File:',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    Image.memory(_Certificate!,height: 100,),
                  ],
                ),
                _schoolcertificate==null?
                ElevatedButton.icon(
                  onPressed: _getschoolcertificate,
                  icon: Icon(Icons.image),
                  label: Text('School Certificate up to the 7 preperatory grade'),
                ):Column(
                  children: [
                    Text(
                      'Selected File:',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    Image.memory(_schoolcertificate!,height: 100,),
                  ],
                ),
                _goodConduct==null?
                ElevatedButton.icon(
                  onPressed: _getCertificate,
                  icon: Icon(Icons.image),
                  label: Text('Select Certificate of Good Conduct Certificate'),
                ):Column(
                  children: [
                    Text(
                      'Selected File:',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    Image.memory(_goodConduct!,height: 100,),
                  ],
                ),
              ],
            ),
          if(widget.i==8)
            Column(
              children: [
                _Certificate==null?
                ElevatedButton.icon(
                  onPressed: _getCertificate,
                  icon: Icon(Icons.image),
                  label: Text('Select Civil Defense course certificate'),
                ):Column(
                  children: [
                    Text(
                      'Selected File:',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    Image.memory(_Certificate!,height: 100,),
                  ],
                ),
                _schoolcertificate==null?
                ElevatedButton.icon(
                  onPressed: _getschoolcertificate,
                  icon: Icon(Icons.image),
                  label: Text('School Certificate up to the 10 grade or higher'),
                ):Column(
                  children: [
                    Text(
                      'Selected File:',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    Image.memory(_schoolcertificate!,height: 100,),
                  ],
                ),
                _goodConduct==null?
                ElevatedButton.icon(
                  onPressed: _getCertificate,
                  icon: Icon(Icons.image),
                  label: Text('Select Certificate of Good Conduct Certificate'),
                ):Column(
                  children: [
                    Text(
                      'Selected File:',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    Image.memory(_goodConduct!,height: 100,),
                  ],
                ),
              ],
            ),
          if(widget.i==9)
            if(_selectedDate != null && _calculateage(_selectedDate!)<18)
              _fatheragreement==null?
              ElevatedButton.icon(
                onPressed: _getagreement,
                icon: Icon(Icons.image),
                label: Text('Select Certificate of Father Agreement'),
              ):Column(
                children: [
                  Text(
                    'Selected File:',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  Image.memory(_fatheragreement!,height: 100,),
                ],
              ),
          SizedBox(height: 20),
          ElevatedButton(
            onPressed: () async {
              if(_selectedDate!=null && _calculateage(_selectedDate!)<16 && widget.i==1)
              {  showMessageDialog(context, 'Sorry!', 'You are under 16, can not apply for a tractor license');}
              else if((widget.i==2 || widget.i==8 || widget.i==9)&&(_selectedDate!=null && _calculateage(_selectedDate!)<17))
                {
                    showMessageDialog(context, 'Sorry!', 'You are under 17, can not apply for a this license');
                }
              else if(_selectedDate!=null && _calculateage(_selectedDate!)<18 && widget.i==3){
                showMessageDialog(context, 'Sorry!', 'You are under 18, can not apply for this license');
              }else if(_selectedDate!=null && _calculateage(_selectedDate!)<19 && widget.i==4){
                showMessageDialog(context, 'Sorry!', 'You are under 19, can not apply for this license');
              }else if(_selectedDate!=null && _calculateage(_selectedDate!)<20 && widget.i==5){
                showMessageDialog(context, 'Sorry!', 'You are under 20, can not apply for this license');
              } else if((widget.i==6 || widget.i==7 || widget.i==10)&& _selectedDate!=null && _calculateage(_selectedDate!)<21)
              {
                  showMessageDialog(context, 'Sorry!', 'You are under 21, can not apply for a this license');

              }
              else{
                applicationID = await fetchData();
                print(applicationID);
                applicationID++;
                print(applicationID);
                _saveData(applicationID.toString(), _selectedDate.toString(),
                    _firstNameController.text, 'Not Done');
                _saveApplicationIdToFirestore(applicationID.toString());
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) =>
                      pay(applicationID: applicationID.toString(),
                          price: 24,
                          firstname: widget.firstname,
                          lastname: widget.lastname,
                          userId: widget.userId)),
                );
              }
            },
            child: Text('Submit'),
          ),
          SizedBox(height:5),
        ],
      ),
    );
  }
  void showMessageDialog(BuildContext context,String text,String text2) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(text,style: TextStyle(color:primary,fontWeight: FontWeight.bold),),
          content: Text(text2),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                // Close the dialog
                Navigator.of(context).pop();
                Navigator.push(
                  context,
                  MaterialPageRoute(
                      builder: (context) => homescreen(
                          userId: widget.userId,
                          firstname: widget.firstname,
                          lastname: widget.lastname)),
                );
              },
              child: Text('OK'),
            ),
          ],
        );
      },
    );
  }
}
